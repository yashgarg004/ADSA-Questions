// Simple Linked List with the functionality of Insert at beginning , at nth position , at end .


class Node {
    int data;
    Node next;
    Node(int d) { data = d; }
}

class LinkedList {
    Node head;

    // Insert at beginning
    void insertAtBeginning(int x) {
        Node newNode = new Node(x);
        newNode.next = head;
        head = newNode;
    }

    // Insert at end
    void insertAtEnd(int x) {
        Node newNode = new Node(x);
        if (head == null) {
            head = newNode;
            return;
        }
        Node temp = head;
        while (temp.next != null) temp = temp.next;
        temp.next = newNode;
    }

    // Insert after nth element (1-based index)
    void insertAfterNth(int n, int x) {
        Node temp = head;
        for (int i = 1; i < n && temp != null; i++) {
            temp = temp.next;
        }
        if (temp == null) {
            System.out.println("Position out of range");
            return;
        }
        Node newNode = new Node(x);
        newNode.next = temp.next;
        temp.next = newNode;
    }

    // Display list
    void display() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList list = new LinkedList();

        list.insertAtBeginning(10);
        list.insertAtEnd(20);
        list.insertAtEnd(30);
        list.insertAtEnd(40);

        System.out.println("Original List:");
        list.display();

        list.insertAfterNth(2, 25); // insert 25 after 2nd element
        list.insertAtBeginning(5);
        list.insertAtEnd(50);

        System.out.println("Updated List:");
        list.display();
    }
}
